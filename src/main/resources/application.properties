spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.show-sql=true
spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.username=postgres
#spring.datasource.password=admin
spring.jpa.database-platform=postgres
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://35.242.221.38:5432/postgres
##spring.datasource.url=r2dbc:gcp:postgres//postgres:IGP3D1quBApKu888@fii-covidtracker:europe-west3:fii-covidtracker-db/postgres
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.show-sql=true
server.port=8081
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.jpa.database-platform=postgres
spring.datasource.username=${CLOUD_SQL_USERNAME}
spring.datasource.password=${CLOUD_SQL_PASSWORD}
# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always